---
apiVersion: v1
kind: Namespace
metadata:
  name: tailscale
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tailscale
  namespace: tailscale
  labels:
    app: tailscale
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tailscale
  template:
    metadata:
      labels:
        app: tailscale
    spec:
      serviceAccountName: "tailscale"
      initContainers:
        # In order to run as a proxy we need to enable IP Forwarding inside
        # the container. The `net.ipv4.ip_forward` sysctl is not allowlisted
        # in Kubelet by default.
        - name: sysctler
          image: busybox
          securityContext:
            privileged: true
          command: [ "/bin/sh" ]
          args:
            - -c
            - sysctl -w net.ipv4.ip_forward=1 net.ipv6.conf.all.forwarding=1
      containers:
        - name: tailscale
          image: ghcr.io/tailscale/tailscale:latest
          env:
            # Store the state in a k8s secret
            - name: TS_KUBE_SECRET
              value: tailscale
            - name: TS_USERSPACE
              value: "true"
            - name: TS_EXTRA_ARGS
              value: "--advertise-exit-node --hostname=prod-cluster"
            - name: TS_TAILSCALED_EXTRA_ARGS
              value: --port 41641
            - name: TS_AUTH_KEY
              valueFrom:
                secretKeyRef:
                  name: tailscale-auth
                  key: TS_AUTH_KEY
                  optional: true
            - name: TS_ROUTES
              value: VPC_CIDR_BLOCK
          resources:
            requests:
              cpu: 15m
              memory: 105M
            limits:
              memory: 105M
        - args:
            - -c
            - apt-get update && apt-get install -y curl gpg dnsutils iproute2 && curl
              -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor
              -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg && echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg]
              https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
              && apt-get update && apt-get install -y kubectl && while true; do kubectl
              get services -n tailscale tailscale -o jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}'
              | while read DOMAIN; do dig $DOMAIN A +short | while read IP; do ip address
              add $IP/24 dev eth0; done ; done ; sleep 300; done
          command:
            - /bin/sh
          image: ubuntu
          name: nlb-get
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tailscale
  namespace: tailscale
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["secrets"]
    # Create can not be restricted to a resource name.
    verbs: ["create"]
  - apiGroups: [""] # "" indicates the core API group
    resourceNames: ["tailscale"]
    resources: ["secrets", "services"]
    verbs: ["get", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tailscale
  namespace: tailscale
subjects:
  - kind: ServiceAccount
    name: "tailscale"
roleRef:
  kind: Role
  name: tailscale
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tailscale
  namespace: tailscale
---
apiVersion: v1
kind: Service
metadata:
  name: tailscale
  namespace: tailscale
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-name: tailscale
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: TCP
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "62762"
    service.beta.kubernetes.io/aws-load-balancer-attributes: load_balancing.cross_zone.enabled=true
    service.beta.kubernetes.io/aws-load-balancer-ip-address-type: ipv4
    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/load-balancer-source-ranges: 0.0.0.0/0
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing

spec:
  selector:
    app: tailscale
  ports:
    - port: 41641
      targetPort: 41641
      protocol: UDP
  type: LoadBalancer
  loadBalancerClass: service.k8s.aws/nlb
